     1                                  bits 16
     2                                  
     3                                  stack:  equ 0x7700      ; Stack pointer (grows to lower addresses)
     4                                  line:   equ 0x7780      ; Buffer for line input
     5                                  sector: equ 0x7800      ; Sector data for directory
     6                                  osbase: equ 0x7a00      ; bootOS location
     7                                  boot:   equ 0x7c00      ; Boot sector location  
     8                                  
     9                                  entry_size:     equ 16  ; Directory entry size
    10                                  sector_size:    equ 512 ; Sector size
    11                                  max_entries:    equ sector_size/entry_size
    12                                  
    13                                          ;
    14                                          ; Cold start of bootOS
    15                                          ;
    16                                          ; Notice it is loaded at 0x7c00 (boot) and needs to
    17                                          ; relocate itself to 0x7a00 (osbase), the instructions
    18                                          ; between 'start' and 'restart' shouldn't depend
    19                                          ; on the assembly location (osbase) because these
    20                                          ; are running at boot location (boot).
    21                                          ;
    22                                          org 0x7a00	; osbase
    23                                  start:
    24 00000000 31C0                            xor ax,ax       ; Set all segments to zero
    25 00000002 8ED8                            mov ds,ax
    26 00000004 8EC0                            mov es,ax
    27 00000006 8ED0                            mov ss,ax
    28 00000008 BC0077                          mov sp,stack    ; Set stack to guarantee data safety
    29 0000000B 8816[2601]                      mov [_disk2 + 1], dl
    30                                  
    31 0000000F FC                              cld             ; Clear D flag.
    32 00000010 BE007C                          mov si,boot     ; Copy bootOS boot sector...
    33 00000013 BF007A                          mov di,osbase   ; ...into osbase
    34 00000016 B90002                          mov cx,sector_size
    35 00000019 F3A4                            rep movsb
    36                                  
    37 0000001B BE[EC01]                        mov si,interrupt_table ; SI now points to interrupt_table 
    38 0000001E BF8000                          mov di,0x0020*4 ; Address of service for int 0x20
    39 00000021 B108                            mov cl,8
    40                                  .load_vec:
    41 00000023 A5                              movsw           ; Copy IP address
    42 00000024 AB                              stosw           ; Copy CS address
    43 00000025 E2FC                            loop .load_vec
    44 00000027 CD20                    	int 0x20
    45                                          ;
    46                                          ; Warm start of bootOS
    47                                          ;
    48                                  restart:
    49 00000029 FC                              cld             ; Clear D flag.
    50 0000002A 0E                              push cs         ; Reinit all segment registers
    51 0000002B 0E                              push cs
    52 0000002C 0E                              push cs
    53 0000002D 1F                              pop ds
    54 0000002E 07                              pop es
    55 0000002F 17                              pop ss
    56 00000030 BC0077                          mov sp,stack    ; Restart stack
    57                                  	
    58 00000033 CD27                    	int 0x27
    59 00000035 B03E                            mov al,'>'      ; Command prompt
    60 00000037 CD26                            int int_input_line ; Input line
    61                                  
    62 00000039 803C00                          cmp byte [si],0x00  ; Empty line?
    63 0000003C 74EB                            je restart          ; Yes, get another line
    64                                  
    65 0000003E BF[D601]                        mov di,commands ; Point to commands list
    66                                  
    67                                          ; Notice that filenames starting with same characters
    68                                          ; won't be recognized as such (so file dirab cannot be
    69                                          ; executed).
    70                                  os11:
    71 00000041 8A05                            mov al,[di]     ; Read length of command in chars
    72 00000043 47                              inc di
    73 00000044 25FF00                          and ax,0x00ff   ; Is it zero?
    74 00000047 7411                            je os12         ; Yes, jump
    75 00000049 91                              xchg ax,cx
    76 0000004A 56                              push si         ; Save current position
    77 0000004B F3A6                            rep cmpsb       ; Compare statement
    78 0000004D 7504                            jne os14        ; Equal? No, jump
    79 0000004F FF15                            call word [di]  ; Call command process
    80 00000051 EBD6                            jmp restart     ; Go to expect another command
    81                                  
    82 00000053 01CF                    os14:   add di,cx       ; Advance the list pointer
    83 00000055 47                              inc di          ; Avoid the address
    84 00000056 47                              inc di
    85 00000057 5E                              pop si
    86 00000058 EBE7                            jmp os11        ; Compare another statement
    87                                  
    88 0000005A 89F3                    os12:   mov bx,si       ; Input pointer
    89 0000005C BF007C                          mov di,boot     ; Location to read data
    90 0000005F CD23                            int int_load_file       ; Load file
    91 00000061 7202                            jc os7          ; Jump if error
    92 00000063 FFE3                            jmp bx
    93                                  
    94                                          ;
    95                                          ; File not found error
    96                                          ;
    97                                  os7:
    98 00000065 BE[FC01]                	mov si,error_message
    99 00000068 E80901                          call output_string
   100 0000006B CD20                            int int_restart ; Go to expect another command
   101                                  
   102                                          ;
   103                                          ; >> COMMAND <<
   104                                          ; rm filename
   105                                          ;
   106                                  rm_command:
   107                                  os22:
   108 0000006D 89F3                            mov bx,si       ; Copy SI (buffer pointer) to BX
   109 0000006F AC                              lodsb
   110 00000070 3C20                            cmp al,0x20     ; Avoid spaces
   111 00000072 74F9                            je os22
   112 00000074 CD25                            int int_delete_file
   113 00000076 72ED                            jc os7
   114 00000078 C3                              ret
   115                                  
   116                                          ;
   117                                          ; 'ls' command
   118                                          ;
   119                                  ls_command:
   120 00000079 E89200                          call read_dir           ; Read the directory
   121 0000007C 89DF                            mov di,bx
   122                                  os18:
   123 0000007E 803D00                          cmp byte [di],0         ; Empty entry?
   124 00000081 7405                            je os17                 ; Yes, jump
   125 00000083 89FE                            mov si,di               ; Point to data
   126 00000085 E8EC00                          call output_string      ; Show name
   127 00000088 E86E00                  os17:   call next_entry
   128 0000008B 75F1                            jne os18                ; No, jump
   129 0000008D C3                              ret                     ; Return
   130                                  
   131                                          ;
   132                                          ; Get filename length and prepare for directory lookup
   133                                          ; Entry:
   134                                          ;   si = pointer to string
   135                                          ; Output:
   136                                          ;   si = unaffected
   137                                          ;   di = pointer to start of directory
   138                                          ;   cx = length of filename including zero terminator
   139                                          ;
   140                                  filename_length:
   141 0000008E 56                              push si
   142 0000008F 31C9                            xor cx,cx       ; cx = 0
   143                                  .loop:
   144 00000091 AC                              lodsb           ; Read character.
   145 00000092 41                              inc cx          ; Count character.
   146 00000093 3C00                            cmp al,0        ; Is it zero (end character)?
   147 00000095 75FA                            jne .loop       ; No, jump.
   148                                  
   149 00000097 5E                              pop si
   150 00000098 BF0078                          mov di,sector   ; Point to start of directory.
   151 0000009B C3                              ret
   152                                          
   153                                          ;
   154                                          ; >> SERVICE <<
   155                                          ; Load file
   156                                          ;
   157                                          ; Entry:
   158                                          ;   ds:bx = Pointer to filename ended with zero byte.
   159                                          ;   es:di = Destination.
   160                                          ; Output:
   161                                          ;   Carry flag = Set = not found, clear = successful.
   162                                          ;
   163                                  load_file:
   164 0000009C 57                              push di         ; Save destination
   165 0000009D 06                              push es
   166 0000009E E84000                          call find_file  ; Find the file (sanitizes ES)
   167 000000A1 B402                            mov ah,0x02     ; Read sector
   168                                  shared_file:
   169 000000A3 07                              pop es
   170 000000A4 5B                              pop bx          ; Restore destination on BX
   171 000000A5 7203                            jc ret_cf       ; Jump if error
   172 000000A7 E87600                          call disk       ; Do operation with disk
   173                                                          ; Carry guaranteed to be clear.
   174                                  ret_cf:
   175 000000AA 89E5                            mov bp,sp
   176 000000AC D05604                          rcl byte [bp+4],1       ; Insert Carry flag in Flags (automatic usage of SS)
   177 000000AF CF                              iret
   178                                  
   179                                          ;
   180                                          ; >> SERVICE <<
   181                                          ; Save file
   182                                          ;
   183                                          ; Entry:
   184                                          ;   ds:bx = Pointer to filename ended with zero byte.
   185                                          ;   es:di = Source.
   186                                          ; Output:
   187                                          ;   Carry flag = Set = error, clear = good.
   188                                          ;
   189                                  save_file:
   190 000000B0 57                              push di                 ; Save origin
   191 000000B1 06                              push es
   192 000000B2 53                              push bx                 ; Save filename pointer
   193 000000B3 CD25                            int int_delete_file     ; Delete previous file (sanitizes ES)
   194 000000B5 5B                              pop bx                  ; Restore filename pointer
   195 000000B6 E8D5FF                          call filename_length    ; Prepare for lookup
   196                                  
   197 000000B9 26803D00                .find:  es cmp byte [di],0      ; Found empty directory entry?
   198 000000BD 7407                            je .empty               ; Yes, jump and fill it.
   199 000000BF E83700                          call next_entry
   200 000000C2 75F5                            jne .find
   201 000000C4 EBDD                            jmp shared_file
   202                                  
   203 000000C6 57                      .empty: push di
   204 000000C7 F3A4                            rep movsb               ; Copy full name into directory
   205 000000C9 E84C00                          call write_dir          ; Save directory
   206 000000CC 5F                              pop di
   207 000000CD E83200                          call get_location       ; Get location of file
   208 000000D0 B403                            mov ah,0x03             ; Write sector
   209 000000D2 EBCF                            jmp shared_file
   210                                  
   211                                          ;
   212                                          ; >> SERVICE <<
   213                                          ; Delete file
   214                                          ;
   215                                          ; Entry:
   216                                          ;   ds:bx = Pointer to filename ended with zero byte.
   217                                          ; Output:
   218                                          ;   Carry flag = Set = not found, clear = deleted.
   219                                          ;
   220                                  delete_file:
   221 000000D4 E80A00                          call find_file          ; Find file (sanitizes ES)
   222 000000D7 72D1                            jc ret_cf               ; If carry set then not found, jump.
   223 000000D9 B91000                          mov cx,entry_size
   224 000000DC E83500                          call write_zero_dir     ; Fill whole entry with zero. Write directory.
   225 000000DF EBC9                            jmp ret_cf
   226                                  
   227                                          ;
   228                                          ; Find file
   229                                          ;
   230                                          ; Entry:
   231                                          ;   ds:bx = Pointer to filename ended with zero byte.
   232                                          ; Result:
   233                                          ;   es:di = Pointer to directory entry
   234                                          ;   Carry flag = Clear if found, set if not found.
   235                                  find_file:
   236 000000E1 53                              push bx
   237 000000E2 E82900                          call read_dir   ; Read directory (sanitizes ES)
   238 000000E5 5E                              pop si
   239 000000E6 E8A5FF                          call filename_length    ; Get filename length and setup DI
   240                                  os6:
   241 000000E9 56                              push si
   242 000000EA 57                              push di
   243 000000EB 51                              push cx
   244 000000EC F3A6                            repe cmpsb      ; Compare name with entry
   245 000000EE 59                              pop cx
   246 000000EF 5F                              pop di
   247 000000F0 5E                              pop si
   248 000000F1 740F                            je get_location ; Jump if equal.
   249 000000F3 E80300                          call next_entry
   250 000000F6 75F1                            jne os6         ; No, jump
   251 000000F8 C3                              ret             ; Return
   252                                  
   253                                  next_entry:
   254 000000F9 83C710                          add di,byte entry_size          ; Go to next entry.
   255 000000FC 81FF007A                        cmp di,sector+sector_size       ; Complete directory?
   256 00000100 F9                              stc                             ; Error, not found.
   257 00000101 C3                              ret
   258                                  
   259                                          ;
   260                                          ; Get location of file on disk
   261                                          ;
   262                                          ; Entry:
   263                                          ;   DI = Pointer to entry in directory.
   264                                          ;
   265                                          ; Result
   266                                          ;   CH = Track number in disk.
   267                                          ;   CL = Sector (always 0x01).
   268                                          ;
   269                                          ; The position of a file inside the disk depends on its
   270                                          ; position in the directory. The first entry goes to
   271                                          ; track 1, the second entry to track 2 and so.
   272                                          ;
   273                                  get_location:
   274 00000102 8D851088                        lea ax,[di-(sector-entry_size)] ; Get entry pointer into directory
   275                                                          ; Plus one entry (files start on track 1)
   276 00000106 B104                            mov cl,4        ; 2^(8-4) = entry_size
   277 00000108 D3E8                            shr ax,cl       ; Shift left and clear Carry flag
   278 0000010A 40                              inc ax          ; AL = Sector 1
   279 0000010B 40                      	inc ax
   280                                  	;or ah, ah
   281 0000010C 91                              xchg ax,cx      ; CH = Track, CL = Sector
   282 0000010D C3                              ret
   283                                  
   284                                          ;
   285                                          ; Read the directory from disk
   286                                          ;
   287                                  read_dir:
   288 0000010E 0E                              push cs         ; bootOS code segment...
   289 0000010F 07                              pop es          ; ...to sanitize ES register
   290 00000110 B402                            mov ah,0x02
   291 00000112 EB06                            jmp short disk_dir
   292                                  
   293                                  write_zero_dir:
   294 00000114 B000                            mov al,0
   295 00000116 F3AA                            rep stosb
   296                                  
   297                                          ;
   298                                          ; Write the directory to disk
   299                                          ;
   300                                  write_dir:
   301 00000118 B403                            mov ah,0x03
   302                                  disk_dir:
   303 0000011A BB0078                          mov bx,sector
   304 0000011D B90200                          mov cx,0x0002
   305                                          ;
   306                                          ; Do disk operation.
   307                                          ;
   308                                          ; Input:
   309                                          ;   AH = 0x02 read disk, 0x03 write disk
   310                                          ;   ES:BX = data source/target
   311                                          ;   CH = Track number
   312                                          ;   CL = Sector number
   313                                          ;
   314                                  disk:
   315 00000120 60                              pusha
   316 00000121 B001                            mov al,0x01     ; AL = 1 sector
   317                                  _disk:
   318                                  %assign db_pos ($ - $$ + 1)
   319                                  %warning DB S is located at offset db_pos
   319          ******************       warning: DB S is located at offset 292 [-w+user]
   320 00000123 B500                    	mov ch, 0x00
   321                                  _disk2:
   322                                  %assign dw_pos ($ - $$ + 1)
   323                                  %warning DW HD is located at offset dw_pos
   323          ******************       warning: DW HD is located at offset 294 [-w+user]
   324 00000125 BA8000                          mov dx, 0x0080; DH = Drive A. DL = Head 0.
   325 00000128 CD13                            int 0x13
   326 0000012A 61                              popa
   327 0000012B 72F3                            jc disk         ; Retry
   328 0000012D C3                              ret
   329                                  
   330                                          ;
   331                                          ; Input line from keyboard
   332                                          ; Entry:
   333                                          ;   al = prompt character
   334                                          ; Result:
   335                                          ;   buffer 'line' contains line, finished with CR
   336                                          ;   SI points to 'line'.
   337                                          ;
   338                                  input_line:
   339 0000012E CD22                            int int_output_char ; Output prompt character
   340 00000130 BE8077                          mov si,line     ; Setup SI and DI to start of line buffer
   341 00000133 89F7                            mov di,si       ; Target for writing line
   342 00000135 92                              xchg ax, dx
   343 00000136 3C08                    os1:    cmp al,0x08     ; Backspace?
   344 00000138 7510                            jne os2
   345 0000013A 4F                              dec di          ; Undo the backspace write
   346 0000013B 39FE                            cmp si, di
   347 0000013D 7417                            je os2_
   348 0000013F 4F                              dec di          ; Erase a character
   349 00000140 50                              push ax
   350 00000141 B020                            mov al, " "
   351 00000143 CD22                            int int_output_char
   352 00000145 B008                            mov al, 0x08
   353 00000147 CD22                            int int_output_char
   354 00000149 58                              pop ax
   355 0000014A CD21                    os2:    int int_input_key  ; Read keyboard
   356 0000014C 3C0D                            cmp al,0x0d     ; CR pressed?
   357 0000014E 7502                            jne os10
   358 00000150 B000                            mov al,0x00
   359 00000152 AA                      os10:   stosb           ; Save key in buffer
   360 00000153 75E1                            jne os1         ; No, wait another key
   361 00000155 CF                              iret             ; Yes, return
   362 00000156 88D0                    os2_:   mov al, dl
   363 00000158 CD22                            int int_output_char
   364 0000015A EBEE                            jmp os2
   365                                          ;
   366                                          ; Read a key into al
   367                                          ; Also outputs it to screen
   368                                          ;
   369                                  input_key:
   370 0000015C B400                            mov ah,0x00
   371 0000015E CD16                            int 0x16
   372 00000160 CD27                    	int 0x27
   373                                          ;
   374                                          ; Screen output of character contained in al
   375                                          ; Expands 0x0d (CR) into 0x0a 0x0d (LF CR)
   376                                          ;
   377                                  output_char:
   378 00000162 3C0D                            cmp al,0x0d
   379 00000164 7506                            jne os3
   380 00000166 B00A                    	mov al, 0x0a
   381 00000168 CD22                            int int_output_char
   382 0000016A B00D                            mov al,0x0d
   383                                  os3:
   384 0000016C B40E                            mov ah,0x0e     ; Output character to TTY
   385 0000016E BB0700                          mov bx,0x0007   ; Gray. Required for graphic modes
   386 00000171 CD10                            int 0x10        ; BIOS int 0x10 = Video
   387 00000173 CF                      irt:    iret
   388                                  
   389                                          ;
   390                                          ; Output string
   391                                          ;
   392                                          ; Entry:
   393                                          ;   SI = address
   394                                          ;
   395                                          ; Implementation:
   396                                          ;   It supposes that SI never points to a zero length string.
   397                                          ;
   398                                  output_string:
   399 00000174 AC                              lodsb                   ; Read character
   400 00000175 CD22                            int int_output_char     ; Output to screen
   401 00000177 3C00                            cmp al,0x00             ; Is it 0x00 (terminator)?
   402 00000179 75F9                            jne output_string       ; No, the loop continues
   403 0000017B B00D                            mov al,0x0d
   404 0000017D CD22                            int int_output_char
   405 0000017F C3                              ret
   406                                  
   407                                          ;
   408                                          ; 'enter' command
   409                                          ;
   410                                  edit_command:
   411 00000180 BF007C                          mov di,boot             ; Point to boot sector
   412 00000183 57                      os23:   push di
   413 00000184 B03C                            mov al,'<'              ; Prompt character
   414 00000186 CD26                            int int_input_line      ; Input line
   415 00000188 5F                              pop di
   416 00000189 803C00                          cmp byte [si],0         ; Empty line?
   417 0000018C 7412                            je os20                 ; Yes, jump
   418 0000018E E81B00                  os19:   call xdigit             ; Get a hexadecimal digit
   419 00000191 73F0                            jnc os23
   420 00000193 B104                            mov cl,4
   421 00000195 D2E0                            shl al,cl
   422 00000197 91                              xchg ax,cx
   423 00000198 E81100                          call xdigit             ; Get a hexadecimal digit
   424 0000019B 08C8                            or al,cl
   425 0000019D AA                              stosb                   ; Write one byte
   426 0000019E EBEE                            jmp os19                ; Repeat loop to complete line
   427                                  os20:        
   428 000001A0 B02A                            mov al,'*'              ; Prompt character
   429 000001A2 CD26                            int int_input_line      ; Input line with filename
   430 000001A4 56                              push si
   431 000001A5 5B                              pop bx
   432 000001A6 BF007C                          mov di,boot             ; Point to data entered
   433 000001A9 CD24                            int int_save_file       ; Save new file
   434 000001AB C3                              ret
   435                                  
   436                                          ;
   437                                          ; Convert ASCII letter to hexadecimal digit
   438                                          ;
   439                                  xdigit:
   440 000001AC AC                              lodsb
   441 000001AD 3C00                            cmp al,0x00             ; Zero character marks end of line
   442 000001AF 740D                            je os15
   443 000001B1 2C30                            sub al,0x30             ; Avoid spaces (anything below ASCII 0x30)
   444 000001B3 72F7                            jc xdigit
   445 000001B5 3C0A                            cmp al,0x0a
   446 000001B7 7205                            jc os15
   447 000001B9 2C07                            sub al,0x07
   448 000001BB 240F                            and al,0x0f
   449 000001BD F9                              stc
   450                                  os15:
   451 000001BE C3                              ret
   452                                  
   453                                  cs_command:
   454 000001BF BE8277                  	mov si, line + 2
   455 000001C2 31C0                    	xor ax, ax
   456 000001C4 91                      	xchg ax, cx
   457 000001C5 E8E4FF                  	call xdigit             ; Get a hexadecimal digit
   458 000001C8 B104                            mov cl,4
   459 000001CA D2E0                            shl al,cl
   460 000001CC 91                              xchg ax,cx
   461 000001CD E8DCFF                          call xdigit             ; Get a hexadecimal digit
   462 000001D0 08C8                            or al,cl
   463 000001D2 A2[2401]                        mov byte [_disk + 1], al
   464 000001D5 C3                      	ret
   465                                  
   466                                  
   467                                  
   468                                          ;
   469                                          ; Commands supported by bootOS
   470                                          ;
   471                                  commands:
   472 000001D6 026C73                          db 2,"ls"
   473 000001D9 [7900]                          dw ls_command
   474 000001DB 0465646974                      db 4,"edit"
   475 000001E0 [8001]                          dw edit_command
   476 000001E2 02726D                          db 2,"rm"
   477 000001E5 [6D00]                          dw rm_command
   478 000001E7 0123                    	db 1,"#"
   479 000001E9 [BF01]                  	dw cs_command
   480 000001EB 00                              db 0
   481                                  
   482                                  int_restart:            equ 0x20
   483                                  int_input_key:          equ 0x21
   484                                  int_output_char:        equ 0x22
   485                                  int_load_file:          equ 0x23
   486                                  int_save_file:          equ 0x24
   487                                  int_delete_file:        equ 0x25
   488                                  int_input_line:		equ 0x26
   489                                  
   490                                  interrupt_table:
   491 000001EC [2900]                          dw restart          ; int 0x20
   492 000001EE [5C01]                          dw input_key        ; int 0x21
   493 000001F0 [6201]                          dw output_char      ; int 0x22
   494 000001F2 [9C00]                          dw load_file        ; int 0x23
   495 000001F4 [B000]                          dw save_file        ; int 0x24
   496 000001F6 [D400]                          dw delete_file      ; int 0x25
   497 000001F8 [2E01]                  	dw input_line	    ; int 0x26
   498 000001FA [7301]                  	dw irt
   499                                  
   500                                  error_message:
   501 000001FC 13                      	db 0x13
   502                                  %assign size 509 - ($ - $$)
   503                                  %warning size bytes left
   503          ******************       warning: 0 bytes left [-w+user]
   504 000001FD 00                              times 510-($-$$) db 0x00
   505 000001FE 55AA                            db 0x55,0xaa            ; Make it a bootable sector
   506 00000200 00<rept>                times (2879 * 512) db 0x00
