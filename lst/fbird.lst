     1                                          ;
     2                                          ; F-bird text game in a bootsector
     3                                          ;
     4                                          ; by Oscar Toledo G.
     5                                          ; http://nanochess.org/
     6                                          ;
     7                                          ; Creation date: Jun/04/2017. A messy unoptimized thing.
     8                                          ; Revision date: Jun/05/2017. Better usage of graphic charset.
     9                                          ;                             Removed a non-8088 long jump. Added
    10                                          ;                             sound. Solved bug when overwriting
    11                                          ;                             previous score.
    12                                          ;
    13                                  
    14                                          use16
    15                                  
    16 00000000 B80200                          mov ax,0x0002   ; Set 80x25 text mode
    17 00000003 CD10                            int 0x10        ; Call BIOS
    18 00000005 FC                              cld             ; Reset direction flag (so stosw increments registers)
    19 00000006 B800B8                          mov ax,0xb800   ; Point to video segment
    20 00000009 8ED8                            mov ds,ax       ; Both the source (common access)
    21 0000000B 8EC0                            mov es,ax       ; and target segments
    22                                          ;
    23                                          ; Game restart
    24                                          ;
    25 0000000D BFA00F                  fb21:   mov di,pipe     ; Init variables in video segment (saves big bytes)
    26 00000010 31C0                            xor ax,ax
    27 00000012 AB                              stosw           ; pipe
    28 00000013 AB                              stosw           ; score
    29 00000014 AB                              stosw           ; grav
    30 00000015 B0A0                            mov al,0xa0
    31 00000017 AB                              stosw           ; next
    32 00000018 B060                            mov al,0x60
    33 0000001A AB                              stosw           ; bird
    34                                  
    35 0000001B BF4A00                          mov di,0x004a   ; Game title
    36 0000001E B8460F                          mov ax,0x0f46   ; 'F' in white, good old ASCII
    37 00000021 AB                              stosw
    38 00000022 B02D                            mov al,0x2d     ; '-'
    39 00000024 AB                              stosw
    40 00000025 B042                            mov al,0x42     ; 'B'
    41 00000027 AB                              stosw
    42 00000028 B049                            mov al,0x49     ; 'I'
    43 0000002A AB                              stosw
    44 0000002B B052                            mov al,0x52     ; 'R'
    45 0000002D AB                              stosw
    46 0000002E B044                            mov al,0x44     ; 'D'
    47 00000030 AB                              stosw
    48 00000031 B95000                          mov cx,80       ; Introduce 80 columns of scenery
    49 00000034 51                      fb1:    push cx
    50 00000035 E8FC00                          call scroll_scenery
    51 00000038 59                              pop cx
    52 00000039 E2F9                            loop fb1
    53                                  
    54 0000003B B401                    fb23:   mov ah,0x01     ; Check if key pressed
    55 0000003D CD16                            int 0x16
    56 0000003F 9C                              pushf
    57 00000040 31C0                            xor ax,ax       ; Wait for a key
    58 00000042 CD16                            int 0x16
    59 00000044 9D                              popf
    60 00000045 75F4                            jnz fb23        ; Jump if key was accumulated, if not already waited for key ;)
    61                                  
    62                                          ;
    63                                          ; Main loop
    64                                          ;
    65 00000047 A0A80F                  fb12:   mov al,[bird]   ; Bird falls... 
    66 0000004A 0206A40F                        add al,[grav]   ; ...because of gravity...
    67 0000004E A2A80F                          mov [bird],al   ; ...into new position.
    68 00000051 24F8                            and al,0xf8     ; Row is a 5.3 fraction, nullify fraction
    69 00000053 B414                            mov ah,0x14     ; Given integer is x8, multiply by 20 to get 160 per line
    70 00000055 F6E4                            mul ah          ; Row into screen
    71 00000057 83C020                          add ax,$0020    ; Fixed column
    72 0000005A 97                              xchg ax,di      ; Pass to DI (AX cannot be used as pointer)
    73 0000005B A0AC0F                          mov al,[frame]
    74 0000005E 2404                            and al,4        ; Wing movement each 4 frames
    75 00000060 7414                            jz fb15
    76 00000062 8A8560FF                        mov al,[di-160] ; Get character below
    77 00000066 C78560FF1E0D                    mov word [di-160],$0d1e ; Draw upper wing
    78 0000006C 0205                            add al,[di]     ; Add another character below
    79 0000006E D0E8                            shr al,1        ; Normalize
    80 00000070 C705140D                        mov word [di],$0d14 ; Draw body
    81 00000074 EB06                            jmp short fb16
    82                                  
    83 00000076 8A05                    fb15:   mov al,[di]     ; Get character below
    84 00000078 C7051F0D                        mov word [di],$0d1f ; Draw body
    85 0000007C 024502                  fb16:   add al,[di+2]   ; Get character below head
    86 0000007F C74502100D                      mov word [di+2],$0d10 ; Draw head
    87 00000084 3C40                            cmp al,0x40     ; Collision with scenery?
    88 00000086 7427                            jz fb19
    89                                          ;
    90                                          ; Stars and game over
    91                                          ;
    92 00000088 C6052A                          mov byte [di],$2a ; '*' Asterisks to indicate crashing
    93 0000008B C645022A                        mov byte [di+2],$2a
    94 0000008F BFCA07                          mov di,0x07CA   
    95 00000092 B8420F                          mov ax,0x0f42   ; 'B' in white, good old ASCII
    96 00000095 AB                              stosw
    97 00000096 B04F                            mov al,0x4F     ; 'O'
    98 00000098 AB                              stosw
    99 00000099 B04E                            mov al,0x4E     ; 'N'
   100 0000009B AB                              stosw
   101 0000009C B04B                            mov al,0x4B     ; 'K'
   102 0000009E AB                              stosw
   103 0000009F B021                            mov al,0x21     ; '!'
   104 000000A1 AB                              stosw
   105 000000A2 B91E00                          mov cx,30       ; Wait 100 frames
   106 000000A5 51                      fb20:   push cx
   107 000000A6 E83901                          call wait_frame 
   108 000000A9 59                              pop cx
   109 000000AA E2F9                            loop fb20
   110 000000AC E95EFF                          jmp fb21        ; Restart
   111                                  
   112 000000AF E83001                  fb19:   call wait_frame ; Wait for frame
   113 000000B2 A0AC0F                          mov al,[frame]
   114 000000B5 2407                            and al,7        ; 8 frames have passed?
   115 000000B7 7504                            jnz fb17        ; No, jump
   116 000000B9 FF06A40F                        inc word [grav] ; Increase gravity
   117                                  fb17:
   118 000000BD B020                            mov al,$20
   119 000000BF 888560FF                        mov [di-160],al   ; Delete bird from screen
   120 000000C3 884502                          mov [di+2],al
   121 000000C6 AA                              stosb
   122 000000C7 E86A00                          call scroll_scenery     ; Scroll scenery
   123 000000CA E86700                          call scroll_scenery     ; Scroll scenery
   124 000000CD 803EA000B0                      cmp byte [0x00a0],0xb0  ; Passed a column?
   125 000000D2 7405                            jz fb27
   126 000000D4 803EA200B0                      cmp byte [0x00a2],0xb0  ; Passed a column?
   127 000000D9 7521                    fb27:   jnz fb24
   128 000000DB FF06A20F                        inc word [score]        ; Increase score
   129 000000DF A1A20F                          mov ax,[score]
   130 000000E2 BF8E00                          mov di,0x008e   ; Show current score
   131 000000E5 31D2                    fb25:   xor dx,dx       ; Extend AX to 32 bits
   132 000000E7 BB0A00                          mov bx,10       ; Divisor is 10
   133 000000EA F7F3                            div bx          ; Divide
   134 000000EC 81C2300C                        add dx,0x0c30   ; Convert remaining 0-9 to ASCII, also put color
   135 000000F0 92                              xchg ax,dx
   136 000000F1 FD                              std
   137 000000F2 AB                              stosw
   138 000000F3 C60520                          mov byte [di],0x20      ; Clean at least one character of prev. score
   139 000000F6 FC                              cld
   140 000000F7 92                              xchg ax,dx
   141 000000F8 09C0                            or ax,ax        ; Score digits still remain?
   142 000000FA 75E9                            jnz fb25        ; Yes, jump
   143 000000FC B401                    fb24:   mov ah,0x01     ; Any key pressed?
   144 000000FE CD16                            int 0x16
   145 00000100 742F                            jz fb26         ; No, go to main loop
   146 00000102 B400                            mov ah,0x00
   147 00000104 CD16                            int 0x16        ; Get key
   148 00000106 3C1B                            cmp al,0x1b     ; Escape key?
   149 00000108 7502                            jne fb4         ; No, jump
   150 0000010A CD20                            int 0x20        ; Exit to DOS or to oblivion (boot sector)
   151 0000010C A1A80F                  fb4:    mov ax,[bird]
   152 0000010F 83E810                          sub ax,0x10     ; Move bird two rows upward
   153 00000112 83F808                          cmp ax,0x08     ; Make sure the bird doesn't fly free outside screen
   154 00000115 7203                            jb fb18
   155 00000117 A3A80F                          mov [bird],ax
   156 0000011A C606A40F00              fb18:   mov byte [grav],0       ; Reset gravity
   157 0000011F B0B6                            mov al,0xb6     ; Flap sound
   158 00000121 E643                            out (0x43),al
   159 00000123 B090                            mov al,0x90
   160 00000125 E642                            out (0x42),al
   161 00000127 B04A                            mov al,0x4a
   162 00000129 E642                            out (0x42),al
   163 0000012B E461                            in al,(0x61)
   164 0000012D 0C03                            or al,0x03      ; Turn on sound
   165 0000012F E661                            out (0x61),al
   166 00000131 E913FF                  fb26:   jmp fb12
   167                                  
   168                                          ;
   169                                          ; Scroll scenery one column at a time
   170                                          ;
   171                                  scroll_scenery:
   172                                          ;
   173                                          ; Move whole screen
   174                                          ;
   175 00000134 BEA200                          mov si,0x00a2   ; Point to row 1, column 1 in SI
   176 00000137 BFA000                          mov di,0x00a0   ; Point to row 1, column 0 in DI
   177 0000013A B94F00                  fb2:    mov cx,79       ; 79 columns
   178 0000013D F3                              repz            ; Scroll!!!
   179 0000013E A5                              movsw
   180 0000013F B8200E                          mov ax,0x0e20   ; Clean last character
   181 00000142 AB                              stosw
   182 00000143 AD                              lodsw           ; Advance source to keep pair source/target
   183 00000144 81FEA20F                        cmp si,0x0fa2   ; All scrolled?
   184 00000148 75F0                            jnz fb2         ; No, jump
   185                                          ;
   186                                          ; Insert houses
   187                                          ;
   188 0000014A C7069E0FDF02                    mov word [0x0f9e],0x02df        ; Terrain
   189 00000150 E440                            in al,(0x40)    ; Get "random" number
   190 00000152 2470                            and al,0x70
   191 00000154 7418                            jz fb5
   192 00000156 BB0804                          mov bx,0x0408   ; House of one floor
   193 00000159 891EFE0E                        mov [0x0efe],bx
   194 0000015D BF5E0E                          mov di,0x0e5e
   195 00000160 2420                            and al,0x20     ; Check "random" number
   196 00000162 7406                            jz fb3
   197 00000164 891D                            mov [di],bx     ; House of two floors
   198 00000166 81EFA000                        sub di,0x00a0
   199 0000016A C7051E09                fb3:    mov word [di],0x091e ; Add roof
   200                                          ;
   201                                          ; Check if it's time to insert a column
   202                                          ;
   203 0000016E FF0EA60F                fb5:    dec word [next] ; Decrease time (column really) for next pipe
   204 00000172 8B1EA60F                        mov bx,[next]
   205 00000176 83FB03                          cmp bx,0x03     ; bx = 3,2,1,0 for the four columns making the pipe
   206 00000179 7766                            ja fb6
   207 0000017B 750A                            jne fb8
   208 0000017D E440                            in al,(0x40)    ; Get "random" number
   209 0000017F 83E007                          and ax,0x0007   ; Between 0 and 7
   210 00000182 0404                            add al,0x04     ; Between 4 and 11
   211 00000184 A3AA0F                          mov [tall],ax   ; This will tell how tall the pipe is
   212 00000187 8B0EAA0F                fb8:    mov cx,[tall]
   213 0000018B 09DB                            or bx,bx        ; Rightmost?
   214 0000018D B2B0                            mov dl,0xb0
   215 0000018F 7409                            jz fb7          ; Yes, jump
   216 00000191 B2DB                            mov dl,0xdb
   217 00000193 83FB03                          cmp bx,0x03     ; Leftmost?
   218 00000196 7202                            jb fb7          ; No, jump
   219 00000198 B2B1                            mov dl,0xb1
   220 0000019A BF3E01                  fb7:    mov di,0x013e   ; Start from top of screen
   221 0000019D B40A                            mov ah,0x0a
   222 0000019F 88D0                            mov al,dl
   223 000001A1 AB                      fb9:    stosw
   224 000001A2 81C79E00                        add di,0x009e
   225 000001A6 E2F9                            loop fb9
   226 000001A8 B0C4                            mov al,0xc4
   227 000001AA AB                              stosw
   228 000001AB 81C7BE03                        add di,0x009e*6+10
   229 000001AF B0DF                            mov al,0xdf     
   230 000001B1 AB                              stosw
   231 000001B2 81C79E00                        add di,0x009e
   232 000001B6 88D0                    fb10:   mov al,dl
   233 000001B8 AB                              stosw
   234 000001B9 81C79E00                        add di,0x009e
   235 000001BD 81FF000F                        cmp di,0x0f00
   236 000001C1 72F3                            jb fb10
   237 000001C3 09DB                            or bx,bx
   238 000001C5 751A                            jnz fb6
   239 000001C7 A1A00F                          mov ax,[pipe]
   240 000001CA 40                              inc ax          ; Increase total pipes shown
   241 000001CB A3A00F                          mov [pipe],ax
   242 000001CE B103                            mov cl,3
   243 000001D0 D3E8                            shr ax,cl
   244 000001D2 B450                            mov ah,0x50     ; Decrease distance between pipes
   245 000001D4 28C4                            sub ah,al
   246 000001D6 80FC10                          cmp ah,0x10
   247 000001D9 7702                            ja fb11
   248 000001DB B410                            mov ah,0x10
   249 000001DD 8826A60F                fb11:   mov [next],ah   ; Time for next pipe
   250 000001E1 C3                      fb6:    ret
   251                                  
   252                                          ;
   253                                          ; Wait for a frame
   254                                          ;
   255                                  wait_frame:
   256 000001E2 B400                            mov ah,0x00     ; Use base clock tick
   257 000001E4 CD1A                            int 0x1a
   258 000001E6 52                      fb14:   push dx
   259 000001E7 B400                            mov ah,0x00     ; Read again base clock tick
   260 000001E9 CD1A                            int 0x1a
   261 000001EB 5B                              pop bx
   262 000001EC 39D3                            cmp bx,dx       ; Wait for change
   263 000001EE 74F6                            jz fb14
   264 000001F0 FF06AC0F                        inc word [frame] ; Increase frame count
   265 000001F4 E461                            in al,(0x61)
   266 000001F6 24FC                            and al,0xfc             ; Turn off sound
   267 000001F8 E661                            out (0x61),al
   268 000001FA CD27                    	int 0x27
   269 000001FC C3                              ret
   270                                  
   271 000001FD 90                              nop
   272                                  
   273 000001FE 55AA                            db 0x55,0xaa    ; Bootable signature
   274                                  
   275                                  pipe:   equ 0x0fa0
   276                                  score:  equ 0x0fa2
   277                                  grav:   equ 0x0fa4
   278                                  next:   equ 0x0fa6
   279                                  bird:   equ 0x0fa8
   280                                  tall:   equ 0x0faa
   281                                  frame:  equ 0x0fac
