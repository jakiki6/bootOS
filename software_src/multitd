target:	equ 0x08
backup:	equ 0xff
stack:	equ 0x0800
base:	equ 0x1000
obase:	equ 0x7c00
basesg:	equ 0x1000

	org base
	bits 16

_start:	mov si, obase
	mov di, base
	push basesg
	pop es
	mov cx, 0x0200
.loop:	cs lodsb
	es stosb
	loop .loop
	jmp basesg:start

start:	push cs
	pop ds
	push cs
	pop ss
	push 0x0000
	pop es
	mov sp, stack

	cli
	es mov ax, word [target * 4]
	es mov word [backup * 4], ax
	es mov ax, word [target * 4 + 2]
        es mov word [backup * 4 + 2], ax
	es mov word [target * 4], irq
	es mov word [target * 4 + 2], basesg
	sti
	int 0x20
irq:	int backup
	pusha
	mov ax, 0x0e00 | "."
	mov bx, 0x0007
	int 0x10
	popa
	iret
