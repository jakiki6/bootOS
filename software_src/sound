;;;;;;;;
; File format:
;	4 bytes delay: dw dx, dw cx
;	508 bytes sound: dw sound
;;;;;;;;
org 0x7c00
bits 16

xor ax, ax
push cs
push cs
push cs
pop es
pop ds
pop ss

start:
	call get_file
	mov si, 0xc004
	mov dx, word [0xc000]
	mov cx, word [0xc002]
loop:
	lodsw
	call tone
	cmp si, 0xc200
	jne loop
	int 0x20
	

get_file:
        mov al, "?"
        call input_line
        mov bx, 0x7780
        mov di, 0xc000
        int 0x23
        jc err
        ret
err:
        mov al, 0x13
        int 0x22
        jmp start
input_line:   
        int 0x26
        ret

tone:
    PUSHA               ; Prolog: Preserve all registers
    MOV BX, AX          ; 1) Preserve the note value by storing it in BX.
    MOV AL, 182         ; 2) Set up the write to the control word register.
    OUT 43h, AL         ; 2) Perform the write.
    MOV AX, BX          ; 2) Pull back the frequency from BX.
    OUT 42h, AL         ; 2) Send lower byte of the frequency.
    MOV AL, AH          ; 2) Load higher byte of the frequency.
    OUT 42h, AL         ; 2) Send the higher byte.
    IN AL, 61h          ; 3) Read the current keyboard controller status.
    OR AL, 03h          ; 3) Turn on 0 and 1 bit, enabling the PC speaker gate and the data transfer.
    OUT 61h, AL         ; 3) Save the new keyboard controller status.
    MOV AH, 86h         ; 4) Load the BIOS WAIT, int15h function AH=86h.
    INT 15h             ; 4) Immidiately interrupt. The delay is already in CX:DX.
    IN AL, 61h          ; 5) Read the current keyboard controller status.
    AND AL, 0FCh        ; 5) Zero 0 and 1 bit, simply disabling the gate.
    OUT 61h, AL         ; 5) Write the new keyboard controller status.
    POPA                ; Epilog: Pop off all the registers pushed
    RET                 ; Epilog: Return.
